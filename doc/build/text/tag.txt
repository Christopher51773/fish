
tag â€” adds tags to objects
**************************

Adds one or more tags (with optional values) to the object or objects
specified.

**FORM**

   tag [flags] <object specifier> <tag-value-pairs>

**EXAMPLES**

When authenticated as  user ``alice``:

   tag "Eiffel Tower" rating=7 seen
   tag -a "Eiffel Tower" rating=7 seen
   tag -a "Eiffel Tower" /alice/rating=7 seen
   tag -i 93bd1999-0998-49cc-8004-af457ce34ce4 rating=7 seen
   tag 93bd1999-0998-49cc-8004-af457ce34ce4 rating=7 seen
   tag -F -a "Eiffel Tower" alice/rating=7 alice/seen
   tag -q 'fluiddb/about matches "Eiffel Tower"' rating=7 seen

**NOTE FOR WINDOWS USERS** Working from a Windows command line, single
quotes do not work as above.   Instead you need to use double quotes
and "stutter" quotes inside quotes.   So the last example becomes:

   tag -q "fluiddb/about matches ""Eiffel Tower""" rating=7 seen

All of these commands will tag the object with about tag "Eiffel
Tower" and ID ``93bd1999-0998-49cc-8004-af457ce34ce4`` with two
tags---``alice/rating`` of 7 and ``alice/seen`` with no value. The
last one may also tag other objects since the query

   fluiddb/about matches "Eiffel Tower"

is search-engine-style string match that will match any about tag
containing the words ``Eiffel`` and ``Tower``, ignoring case, other
words and punctuation.

The ``-F`` option specifies "Fluidinfo-style" relative paths; when
this option is used, all tag names must start with the relevant user
name (as is always the case within queries).

The command produces no output when successful and a suitable warning
when it fails.

   $ fish tag -a "Eiffel Tower" rating=7

   $ fish tag -a "Eiffel Tower" /bert/rating=7
   Failed to tag object with about="Eiffel Tower" with bert/rating
   Error code 401 (UNAUTHORIZED)


Writing Files to Fluidinfo
==========================

There is experimental new functionality to allow files to be written
to Fluidinfo using Fish's ``tag`` command.

At it simplest, the idea is to use the ``-f`` flag; when this is done,
parameter values are taken to be file names.   So, for example,
suppose the Fluidinfo user ``njr`` has a file in the ``/tmp``
directory called ``spinner.gif`` and wants to upload this as the tag
``njr/image/red-spinner.gif`` on the object with the *about* tag
``abouttag``.   Assume that we are on a Unix-like system and that the
current working directory is ``/tmp``.   Then any of the following
will work:

   $ fish tag -f abouttag image/red-spinner.gif=spinner.gif
   $ fish tag -f abouttag image/red-spinner.gif=./spinner.gif
   $ fish tag -f abouttag image/red-spinner.gif=/tmp/spinner.gif
   $ fish tag -f -M image/gif abouttag image/red-spinner.gif=/tmp/spinner.gif

This file has been written and can be viewed at:

   http://fluiddb.fluidinfo.com/about/abouttag/njr/image/red-
   spinner.gif

Notice that the correct MIME type is served.

Points to note:

   * The ``-f`` flag indicates that all tag values in the command are
     filenames.

   * The filename has to be included even if it is indentical to the
     tag name (though this may change at a later date) and there is no
     recursive option for writing directories as tag bundles at the
     moment.

   * By default, MIME types for certain common files are inferred from
     the file extension as detailed below.

   * If you want to specify the MIME type explicitly, use the -M flag
     to do this. This will apply to all tags set in the command.

   * Text files are assumed to be encoded as UTF-8.

   * On unix-like systems, tildes will be expanded, so ``~`` and
     ``~njr`` etc. may be used.

The file extensions for which MIME types are inferred fall into two
groups. First are the textual MIME types (non-necessarily types that
begin ``text/``, but ones whose contents are textual).   There are:

   TEXTUAL_MIMES = {
       'txt': None,
       'csv': 'text/plain',
       'html': 'text/html',
       'xml': 'text/xml',
       'htm': 'text/html',
       'css': 'text/css',
       'js': 'text/javascript',
       'vcf': 'text/vcard',
       'plain': 'text/plain',
       'vsg': 'image/svg+xml',
       'ps': 'application/postscript',
       'eps': 'application/postscript',
       'rss': 'application/rss+xml',
       'atom': 'application/atom+xml',
       'xhtml': 'application/xhtml+xml',
   }

This shows the MIME type that will be used for each extension.  Files
with these extensions are read as *non*-binary (``open("foo.text")``)
and interpreted as 'UTF-8'.

Notice that ``.txt`` files are not given a MIME type, meaning that
they are written as primitive (unicode) strings to Fluidinfo.

The extensions for which non-textual types are inferred are listed
below. These files are read as binary files (``open("foo.text",
'rb')``)

   BINARY_MIMES = {
       'png': 'image/png',
       'jpeg': 'image/jpeg',
       'jpg': 'image/jpg',
       'gif': 'image/gif',
       'tif': 'image/tiff',
       'tiff': 'image/tiff',
       'ico': 'image/vnd.microsoft.icon',
       'pdf': 'application/pdf',
       'zip': 'application/zip',
       'gz': 'application/x-gzip',
       'json': 'application/json',
       'mp3': 'audio/mpeg',
       'mp4': 'audio/mp4',
       'ogg': 'audio/ogg',
       'wav': 'audio/vnd.wave',
       'tar': 'application/x-tar',
       'rar': 'application/x-rar-compressed',
   }

Use the ``-M`` flag to set the MIME type where this mapping is not
correct or where the MIME type is not listed above.

This feature is experimental and may change in various ways as
experience with it is gained.

**NOTES**

The user must have permission to write the tag. By default, the user
can write any tag under her namespace.
