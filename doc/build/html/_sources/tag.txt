tag â€” adds tags to objects
**************************

Adds one or more tags (with optional values) to the object or objects
specified.

**FORM**
::

    tag [flags] <object specifier> <tag-value-pairs>

**EXAMPLES**

When authenticated as  user ``alice``:
::

    tag "Eiffel Tower" rating=7 seen
    tag -a "Eiffel Tower" rating=7 seen
    tag -a "Eiffel Tower" /alice/rating=7 seen
    tag -i 93bd1999-0998-49cc-8004-af457ce34ce4 rating=7 seen
    tag 93bd1999-0998-49cc-8004-af457ce34ce4 rating=7 seen
    tag -F -a "Eiffel Tower" alice/rating=7 alice/seen
    tag -q 'fluiddb/about matches "Eiffel Tower"' rating=7 seen

**NOTE FOR WINDOWS USERS**
Working from a Windows command line, single quotes
do not work as above.   Instead you need to use double quotes and "stutter"
quotes inside quotes.   So the last example becomes:
::

    tag -q "fluiddb/about matches ""Eiffel Tower""" rating=7 seen


All of these commands will tag the object with about tag "Eiffel Tower"
and ID ``93bd1999-0998-49cc-8004-af457ce34ce4`` with two
tags---``alice/rating`` of 7 and ``alice/seen`` with no value.
The last one may also tag other objects since the query
::

    fluiddb/about matches "Eiffel Tower"

is search-engine-style string match that will match any about tag
containing the words ``Eiffel`` and ``Tower``, ignoring case, other words
and punctuation.

The ``-F`` option specifies "Fluidinfo-style" relative paths; when
this option is used, all tag names must start with the relevant user
name (as is always the case within queries).

The command produces no output when successful and a suitable
warning when it fails.
::

  $ fish tag -a "Eiffel Tower" rating=7

  $ fish tag -a "Eiffel Tower" /bert/rating=7
  Failed to tag object with about="Eiffel Tower" with bert/rating
  Error code 401 (UNAUTHORIZED)

**NOTES**

The user must have permission to write the tag.
By default, the user can write any tag under her namespace.


